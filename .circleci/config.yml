version: 2.1

jobs:
  install_and_test:
    docker:
      - image: circleci/node:14.15-browsers
        environment:
          CHROME_BIN: "/usr/bin/google-chrome"
    steps:
      - checkout
      - restore_cache:
          key: vocab_frontend-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install
          command: npm install
      - save_cache:
          key: vocab_frontend-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: build
          command: npm run build
      - run:
          name: Run tests
          command: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: .
          paths:
            - .

  docker_build:
    docker:
      - image: circleci/node:14.15.3
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker image
          command: |
            docker build -t ruedigermueller/vocab_frontend:undertest .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ruedigermueller/vocab_frontend:undertest

  heroku_deploy_to_test:
    docker:
      - image: circleci/node:14.15.3
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Deploy image to Heroku test environment
          command: |
            echo $HEROKU_API_KEY | docker login -u=_ --password-stdin registry.heroku.com
            docker pull ruedigermueller/vocab_frontend:undertest
            docker tag ruedigermueller/vocab_frontend:undertest registry.heroku.com/$HEROKU_TEST/web
            docker push registry.heroku.com/$HEROKU_TEST/web

  heroku_release_for_test:
    docker:
      - image: circleci/node:14.15.3
    steps:
      - run:
          name: Install Heroku CLI (If not installed)
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: Release on Heroku test environment
          command: heroku container:release web --app $HEROKU_TEST

  heroku_deploy_to_prod:
    docker:
      - image: circleci/node:14.15.3
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Deploy image to Heroku prod environment
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker pull ruedigermueller/vocab_frontend:undertest
            docker tag ruedigermueller/vocab_frontend:undertest ruedigermueller/vocab_frontend:released
            docker push ruedigermueller/vocab_frontend:released
            echo $HEROKU_API_KEY | docker login -u=_ --password-stdin registry.heroku.com
            docker tag ruedigermueller/vocab_frontend:released registry.heroku.com/$HEROKU_PROD/web
            docker push registry.heroku.com/$HEROKU_PROD/web

  heroku_release_for_prod:
    docker:
      - image: circleci/node:14.15.3
    steps:
      - run:
          name: Install Heroku CLI (If not installed)
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: Release on Heroku prod environment
          command: heroku container:release web --app $HEROKU_PROD
  
  scp_deploy:
    docker:
      - image: circleci/node:14.15.3
    steps:
      - run:
          name: Setup CF CLI
          command: |
            sudo curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&source=github&version=v7'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.cf.eu10.hana.ondemand.com
            cf auth "$SCP_USER" "$SCP_PASSWORD"
            cf target -o "$SCP_ORG" -s "$SCP_SPACE"
      - attach_workspace:
          at: .
      - run:
          name: Build frontend
          command: npm run-script build
      - run:
          name: CF Deploy
          command: cf push

workflows:
  deploy:
    jobs:
      - install_and_test
      - docker_build:
          requires:
            - install_and_test
          context: vocab
      - heroku_deploy_to_test:
          requires:
            - docker_build
          context: vocab
      - heroku_release_for_test:
          requires:
            - heroku_deploy_to_test
      - approve_for_prod:
          type: approval
          requires:
            - heroku_release_for_test
      - heroku_deploy_to_prod:
          requires:
            - approve_for_prod
          context: vocab
      - heroku_release_for_prod:
          requires:
            - heroku_deploy_to_prod
      - scp_deploy:
          requires:
            - approve_for_prod
          context: vocab
